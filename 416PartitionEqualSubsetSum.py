from typing import List
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
    
        # If total is odd, we can't split it into two equal subsets
        if total % 2 != 0:
            return False

        target = total // 2
        
        # dp[i] will be True if a subset with sum i can be formed
        dp = [False] * (target + 1)
        dp[0] = True  # Base case: zero sum is always possible

        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]

        return dp[target]

s = Solution()
print(s.canPartition(nums = [1,5,11,5]))
print(s.canPartition([1,2,3,5]))
print(s.canPartition([100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100, 99, 97]))
#print(s.canPartition